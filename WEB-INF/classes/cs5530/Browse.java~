package cs5530;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

public class Browse {
    
    public Browse(){}
    
    public static void find(ArrayList<String> items, Connection con) throws SQLException{
	int pricelow = 0;
	int pricehigh = Integer.MAX_VALUE;
	String state = null, city = null, text_search = null, category = null, sort = null;
	
	if(!items.get(0).isEmpty()) pricelow = Integer.parseInt(items.get(0));
	if(!items.get(1).isEmpty()) pricehigh = Integer.parseInt(items.get(1));

	if(!items.get(2).isEmpty()) state = items.get(2);
	else if(!items.get(3).isEmpty()) city = items.get(3);

	if(!items.get(5).isEmpty()) category = items.get(5);
	
	sort = items.get(6);
	
	//No text search
	if(items.get(4).isEmpty())
	    withoutTextSearch(state, city, category, pricelow, pricehigh, sort, con);
	else
	    withTextSearch(state, city, category, pricelow, pricehigh, items.get(4), sort ,con);
    }
    
    public static void withoutTextSearch(String state, String city, String category, int pricelow, 
					 int pricehigh, String sortingOption, Connection con) throws SQLException{
	
	String sql;
	ResultSet results = null;
	PreparedStatement preparedStmt = con.prepareStatement("");
	
	sql = generateQueries(false, sortingOption, "");
	System.out.println(sql);
	preparedStmt = con.prepareStatement(sql);
	preparedStmt.setInt(1, pricelow);
	preparedStmt.setInt(2, pricehigh);
	preparedStmt.setString(3, state);
	preparedStmt.setString(4, state);
	preparedStmt.setString(5, city);
	preparedStmt.setString(6, city);
	preparedStmt.setString(7, category);
	preparedStmt.setString(8, category);
	results = preparedStmt.executeQuery();
	printResults(results);
    }
    
    public static void withTextSearch(String state, String city, String category, int pricelow, 
				      int pricehigh, String text, String sortingOption, Connection con) throws SQLException{
	
	String sql;
	ResultSet results = null;
	PreparedStatement preparedStmt = con.prepareStatement("");
	String[] searchTerms = text.split(" ");
	String likeQuery = " and (name like ? or word like ?";
	for (int i = 1; i < searchTerms.length; i++)
	    likeQuery += " or name like ? or word like ?";
	likeQuery += ")";
	sql = generateQueries(true, sortingOption, likeQuery);
	System.out.println(sql);
	preparedStmt = con.prepareStatement(sql);
	preparedStmt.setInt(1, pricelow);
	preparedStmt.setInt(2, pricehigh);
	preparedStmt.setString(3, state);
	preparedStmt.setString(4, state);
	preparedStmt.setString(5, city);
	preparedStmt.setString(6, city);
	preparedStmt.setString(7, category);
	preparedStmt.setString(8, category);

	int i = 8;
	for (String s: searchTerms){
	    preparedStmt.setString(++i, "%" + s + "%");
	    preparedStmt.setString(++i, "%" + s + "%");
	}
	
	results = preparedStmt.executeQuery();
	printResults(results);
    }
    
    public static String generateQueries(boolean textSearch, String sortingOption, String likeQuery){
	
	String sql = "";
	
	sql = "select distinct t.hid, login, category, name, city, state, price_per "
	    + ((sortingOption.equals("avg") | sortingOption.equals("avgtrusted")) ? " , A.avgScore " : "")
	    + "from th t" + (textSearch == true ? ", keywords k" : "")
	    + (sortingOption.equals("avg") ? ", (select avg(score) as avgScore, hid from feedback group by hid) as A " : "")
	    +  (sortingOption.equals("avgtrusted") ? ", (select f.hid, avg(f.score) as avgScore from trust tr, feedback f where tr.login2 = f.login group by f.hid) as A " : "")
	    + " where " + (textSearch == true ? "t.hid = k.hid and " : "")
	    +  ((sortingOption.equals("avg") | sortingOption.equals("avgtrusted")) ? " A.hid = t.hid and " : "")
	    + "(price_per > ? and price_per < ?) "
	    + "and (? is null or state = ?)"
	    + " and (? is null or city = ?) "
	    + "and (? is null or category = ?)"
	    + (textSearch == true ? likeQuery : "")
	    + (sortingOption.equals("price") ? " order by price_per " : "")
	    + ((sortingOption.equals("avg") | sortingOption.equals("avgtrusted")) ? " order by A.avgScore desc;" : "");
	
	//bad solution but an easy one
	if(!sql.substring(sql.length() - 1).equals(";"))
	    sql += ";";
	
	return sql;
	
    }
    
    public static void printResults(ResultSet results) throws SQLException{
	while(results.next()) {
	    System.out.println("HID: " + results.getInt(1) + "\tUsername: " + results.getString(2) +
			       "\tCategory: " + results.getString(3) + "\tName: " + results.getString(4) + "\tCity: " + results.getString(5) +
			       "\tState: " + results.getString(6) + "\tPrice Per: " + results.getInt(7));
	}
    }

}
